CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  user_name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS categories (
  category_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category_name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS events (
  event_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  annotation VARCHAR(2000) NOT NULL,
  
  
  description VARCHAR(7000) NOT NULL,
  event_created_on TIMESTAMP NOT NULL,
  event_date TIMESTAMP NOT NULL,
  event_status VARCHAR(16) NOT NULL CHECK(event_status IN ('PENDING', 'PUBLISHED', 'CANCELED')),
  event_title VARCHAR(120) NOT NULL,
  initiator_id BIGINT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
  location_latitude FLOAT4 NOT NULL,
  location_longitude FLOAT4 NOT NULL,
  paid BOOLEAN NOT NULL,
  participant_limit INTEGER NOT NULL,
  published_on TIMESTAMP NOT NULL,
  request_moderation BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS event_category (
  event_id BIGINT NOT NULL REFERENCES events (event_id) ON DELETE CASCADE,
  category_id BIGINT NOT NULL REFERENCES categories (category_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations (
  compilation_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  compilation_title VARCHAR(120) NOT NULL,
  pinned BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS event_compilation (
  event_id BIGINT NOT NULL REFERENCES events (event_id) ON DELETE CASCADE,
  compilation_id BIGINT NOT NULL REFERENCES compilations (compilation_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests (
  request_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id BIGINT NOT NULL REFERENCES events (event_id) ON DELETE CASCADE,
  request_created_on TIMESTAMP NOT NULL,
  request_status VARCHAR(16) NOT NULL CHECK(request_status IN ('PENDING', 'PUBLISHED', 'CANCELED')),
  requester_id BIGINT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE
);



	
	
	
	
	
